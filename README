FILE: new_usb.tar.aes

Mostly used to upgrade that are stuck without network access.

FILE: collect

Generates new_* and chksum_* files to be put into a tarball file. MD5 files of the tarball
is generated along with encrypted package and will overwrite the encrypted file 
'new_usb.tar.aes'.

#online documentation for OpenSSL
http://madboa.com/geek/openssl/

#generate private key of 1024 bit and redirect to file
openssl genrsa -out private.pem 1024

#generate public key from private key from file and redirect to file
openssl rsa -in foo_private.pem -pubout -out foo_public.pem

#signing a digest encrypting into binary using hack private key and redirect to output file
openssl dgst -md5 -sign hack.pem -out config.xml.sig config.xml

#signing a digest encrypting into hex using hack private key and redirect to output file
openssl dgst -hex -md5 -sign hack.pem -out config.xml.sig config.xml

#signing a digest encrypting into base64 using hack private key and redirect to output file
openssl dgst -md5 -sign hack.pem config.xml | openssl enc -base64 -out config.xml.sig

#verifying the signed digest using hack public key
openssl dgst -md5 -verify hack.pem -signature config.xml.sig config.xml

#signing config.xml using RSA private key
openssl rsautl -sign -inkey hack.pem -in config.xml -out config.xml.rsa

#verifying config.xml.rsa using RSA public key
openssl rsautl -verify -pubin -inkey hack.pem -in config.xml.rsa

#encrypting file using foo public key
openssl rsautl -encrypt -inkey foo_public.pem -pubin -in config.xml -out config.xml.ssl

#decrypting file using foo private key
openssl rsautl -decrypt -inkey foo_private.pem -in config.xml.ssl -out config.xml


#extract release notes from Rally
#Firstly, in Rally, go to "Dashboards", -> "Release Status", -> "State = Accepted", -> "Filter", -> "Actions = Export to CVS"
#Secondly, run command to format:
cat foo_5.11.csv | cut -d , -f1,2 | sed "s/\"//g; s/,/\t/"
